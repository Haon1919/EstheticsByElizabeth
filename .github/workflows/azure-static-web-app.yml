name: Azure Static Web App Deploy

on:
  push:
    branches: [ main ]
  pull_request:
    types: [opened, synchronize, reopened]
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read
  pull-requests: write

concurrency:
  group: azure-swa-${{ github.ref }}
  cancel-in-progress: true

env:
  APP_LOCATION: src/frontend
  API_LOCATION: src/backend/API
  OUTPUT_LOCATION: dist/app
  DOTNET_VERSION: '8.0.x'
  NODE_VERSION: '18'

jobs:
  build_and_deploy:
    name: Build & Deploy Static Web App
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: '${{ env.APP_LOCATION }}/package-lock.json'

      - name: Install Frontend Dependencies
        working-directory: ${{ env.APP_LOCATION }}
        run: npm ci

      - name: Build Frontend (Angular)
        working-directory: ${{ env.APP_LOCATION }}
        run: |
          npm run build -- --configuration production
          ls -la dist || true

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Restore Backend Dependencies
        working-directory: ${{ env.API_LOCATION }}
        run: dotnet restore

      - name: Build Backend (Azure Functions .NET Isolated)
        working-directory: ${{ env.API_LOCATION }}
        run: dotnet build --configuration Release --no-restore

      # Deploy using Azure Static Web Apps action. Requires AZURE_STATIC_WEB_APPS_API_TOKEN secret.
      - name: Deploy to Azure Static Web App
        uses: Azure/static-web-apps-deploy@v1
        with:
          azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN }}
          repo_token: ${{ secrets.GITHUB_TOKEN }} # for PR comments
          action: 'upload'
          app_location: ${{ env.APP_LOCATION }}
          api_location: ${{ env.API_LOCATION }}
          output_location: ${{ env.APP_LOCATION }}/${{ env.OUTPUT_LOCATION }}
          # By default the action will run framework builds; we already built, but leaving as-is is fine.
        env:
          # Pass build output path hint (avoid rebuilding Angular)
          SKIP_APP_BUILD: 'true'
          SKIP_API_BUILD: 'true'

  run_migrations:
    name: Run EF Migrations (Optional)
    needs: build_and_deploy
    if: ${{ success() && secrets.DB_CONNECTION_STRING != '' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Install dotnet-ef Tool
        run: dotnet tool install --global dotnet-ef

      - name: Export Connection String
        run: echo "ConnectionStrings__DefaultConnection=${{ secrets.DB_CONNECTION_STRING }}" >> $GITHUB_ENV

      - name: Update Database
        working-directory: ${{ env.API_LOCATION }}
        env:
          ConnectionStrings__DefaultConnection: ${{ secrets.DB_CONNECTION_STRING }}
        run: |
          dotnet restore
          dotnet ef database update --verbose

      - name: Migration Summary
        run: echo "EF migrations applied to target database."
