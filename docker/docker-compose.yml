services:
  postgres:
    image: postgres:14
    container_name: local-postgres
    environment:
      POSTGRES_PASSWORD: Ieatbugsandsquashfrogs
      POSTGRES_USER: postgres
      POSTGRES_DB: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  api:
    build:
      context: ../src/backend/API
      dockerfile: Dockerfile
    container_name: esthetics-api
    environment:
      - FUNCTIONS_WORKER_RUNTIME=dotnet-isolated
      - ConnectionStrings__DefaultConnection=Host=postgres;Port=5432;Database=postgres;Username=postgres;Password=Ieatbugsandsquashfrogs;TrustServerCertificate=true;SslMode=Disable
      - AzureWebJobsStorage=DefaultEndpointsProtocol=http;AccountName=devstoreaccount1;AccountKey=Eby8vdM02xNOcqFlqUwJPLlmEtlCDXJ1OUzFT50uSRZ6IFsuFq2UVErCz4I6tq/K1SZFPTOtr/KBHBeksoGMGw==;BlobEndpoint=http://127.0.0.1:10000/devstoreaccount1;QueueEndpoint=http://127.0.0.1:10001/devstoreaccount1;TableEndpoint=http://127.0.0.1:10002/devstoreaccount1;
    ports:
      - "80:80"
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped

  tests:
    build:
      context: ..
      dockerfile: docker/Dockerfile.tests
    container_name: esthetics-tests
    environment:
      - ASPNETCORE_ENVIRONMENT=Testing
    profiles:
      - testing
    command: tail -f /dev/null

volumes:
  postgres-data: